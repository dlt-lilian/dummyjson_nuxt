/**
 * name: @tresjs/core
 * version: v4.2.1
 * (c) 2024
 * description: Declarative ThreeJS using Vue Components
 * author: Alvaro Saburido <hola@alvarosaburido.dev> (https://github.com/alvarosabu/)
 */
var bt = Object.defineProperty;
var Pt = (e, t, n) => t in e ? bt(e, t, { enumerable: !0, configurable: !0, writable: !0, value: n }) : e[t] = n;
var me = (e, t, n) => Pt(e, typeof t != "symbol" ? t + "" : t, n);
import { ref as I, computed as Y, watchEffect as Te, onUnmounted as Q, shallowRef as H, watch as le, readonly as ye, unref as K, provide as _e, inject as Mt, isRef as Ct, reactive as Et, defineComponent as Be, useSlots as Tt, getCurrentInstance as Ie, onMounted as St, openBlock as At, createElementBlock as kt, normalizeClass as xt, normalizeStyle as Lt, createRenderer as Rt, h as He, Fragment as Ot } from "vue";
import * as et from "three";
import { PerspectiveCamera as we, Camera as Dt, Clock as tt, Vector3 as Se, Color as ce, Scene as nt, MathUtils as rt, MeshBasicMaterial as ot, DoubleSide as jt, REVISION as Bt, SRGBColorSpace as It, ACESFilmicToneMapping as st, PCFSoftShadowMap as Ht, NoToneMapping as $t, WebGLRenderer as he, TextureLoader as Ut, Vector2 as ge, Raycaster as Ft, BufferAttribute as Wt, Object3D as Nt, Line as zt, BufferGeometry as $e, Float32BufferAttribute as Ue, LineBasicMaterial as Gt, Mesh as Vt, BackSide as Yt, DirectionalLightHelper as qt, PointLightHelper as Jt, SpotLightHelper as Kt, HemisphereLightHelper as Qt, ArrowHelper as Xt } from "three";
import { createEventHook as j, useRafFn as it, toValue as k, unrefElement as Zt, useDevicePixelRatio as en, usePointer as tn, useElementBounding as nn, useWindowSize as rn, useElementSize as on, refDebounced as Fe, tryOnScopeDispose as sn, useFps as an, useMemory as ln } from "@vueuse/core";
const cn = "@tresjs/core", un = "module", fn = "4.2.1", dn = "pnpm@9.1.4", pn = "Declarative ThreeJS using Vue Components", mn = "Alvaro Saburido <hola@alvarosaburido.dev> (https://github.com/alvarosabu/)", hn = "MIT", gn = [
  "vue",
  "3d",
  "threejs",
  "three",
  "threejs-vue"
], vn = !1, yn = {
  ".": {
    types: "./dist/index.d.ts",
    import: "./dist/tres.js",
    require: "./dist/tres.umd.cjs"
  },
  "./components": {
    types: "./dist/src/components/index.d.ts"
  },
  "./composables": {
    types: "./dist/src/composables/index.d.ts"
  },
  "./types": {
    types: "./dist/src/types/index.d.ts"
  },
  "./utils": {
    types: "./dist/src/utils/index.d.ts"
  },
  "./*": "./*"
}, _n = "./dist/tres.js", wn = "./dist/tres.js", bn = "./dist/index.d.ts", Pn = [
  "*.d.ts",
  "dist"
], Mn = {
  access: "public"
}, Cn = {
  dev: "cd playground && npm run dev",
  build: "vite build",
  playground: "cd playground && npm run dev",
  test: "vitest",
  "test:ci": "vitest run",
  "test:ui": "vitest --ui --coverage.enabled=true",
  release: "release-it",
  coverage: "vitest run --coverage",
  lint: "eslint .",
  "lint:fix": "eslint . --fix",
  "docs:dev": "vitepress dev docs",
  "docs:build": "vitepress build docs",
  "docs:serve": "vitepress serve docs",
  "docs:preview": "vitepress preview docs",
  "docs:contributors": "esno scripts/update-contributors.ts",
  prepare: "node .husky/install.mjs"
}, En = {
  three: ">=0.133",
  vue: ">=3.4"
}, Tn = {
  "@alvarosabu/utils": "^3.2.0",
  "@vue/devtools-api": "^6.6.3",
  "@vueuse/core": "^10.11.0"
}, Sn = {
  "@release-it/conventional-changelog": "^8.0.1",
  "@stackblitz/sdk": "^1.11.0",
  "@tresjs/cientos": "3.9.0",
  "@tresjs/eslint-config": "^1.1.0",
  "@types/three": "^0.166.0",
  "@typescript-eslint/eslint-plugin": "^7.16.0",
  "@typescript-eslint/parser": "^7.16.0",
  "@vitejs/plugin-vue": "^5.0.5",
  "@vitest/coverage-c8": "^0.33.0",
  "@vitest/coverage-v8": "^2.0.2",
  "@vitest/ui": "^2.0.2",
  "@vue/test-utils": "^2.4.6",
  eslint: "^9.6.0",
  "eslint-plugin-vue": "^9.27.0",
  esno: "^4.7.0",
  gsap: "^3.12.5",
  husky: "^9.0.11",
  jsdom: "^24.1.0",
  kolorist: "^1.8.0",
  ohmyfetch: "^0.4.21",
  pathe: "^1.1.2",
  "release-it": "^17.5.0",
  "rollup-plugin-analyzer": "^4.0.0",
  "rollup-plugin-copy": "^3.5.0",
  "rollup-plugin-visualizer": "^5.12.0",
  sponsorkit: "^0.14.6",
  three: "^0.166.1",
  unocss: "^0.61.3",
  unplugin: "^1.11.0",
  "unplugin-vue-components": "^0.27.2",
  vite: "^5.3.3",
  "vite-plugin-banner": "^0.7.1",
  "vite-plugin-dts": "3.9.1",
  "vite-plugin-inspect": "^0.8.4",
  "vite-plugin-require-transform": "^1.0.21",
  "vite-svg-loader": "^5.1.0",
  vitepress: "1.3.0",
  vitest: "^2.0.2",
  vue: "^3.4.31",
  "vue-demi": "^0.14.8"
}, An = {
  name: cn,
  type: un,
  version: fn,
  packageManager: dn,
  description: pn,
  author: mn,
  license: hn,
  keywords: gn,
  sideEffects: vn,
  exports: yn,
  main: _n,
  module: wn,
  types: bn,
  files: Pn,
  publishConfig: Mn,
  scripts: Cn,
  peerDependencies: En,
  dependencies: Tn,
  devDependencies: Sn
};
function be(e) {
  return typeof e > "u";
}
function de(e) {
  return Array.isArray(e);
}
function kn(e) {
  return typeof e == "number";
}
function at(e) {
  return typeof e == "string";
}
function V(e) {
  return typeof e == "function";
}
function N(e) {
  return e === Object(e) && !de(e) && !V(e);
}
function W(e) {
  return N(e) && "isObject3D" in e && !!e.isObject3D;
}
function We(e) {
  return N(e) && "isCamera" in e && !!e.isCamera;
}
function xn(e) {
  return N(e) && "isBufferGeometry" in e && !!e.isBufferGeometry;
}
function Ln(e) {
  return N(e) && "isMaterial" in e && !!e.isMaterial;
}
function Rn(e) {
  return N(e) && "isFog" in e && !!e.isFog;
}
function On(e) {
  return N(e) && "isScene" in e && !!e.isScene;
}
function re(e) {
  return W(e) || xn(e) || Ln(e) || Rn(e);
}
function Dn(e) {
  return N(e) && !!e.isPrimitive;
}
const jn = ({ sizes: e }) => {
  const t = I([]), n = Y(
    () => t.value[0]
  ), r = (i) => {
    const l = i instanceof Dt ? i : t.value.find((o) => o.uuid === i);
    if (!l)
      return;
    const c = t.value.filter(({ uuid: o }) => o !== l.uuid);
    t.value = [l, ...c];
  }, s = (i, l = !1) => {
    if (We(i)) {
      const c = i;
      if (t.value.some(({ uuid: o }) => o === c.uuid))
        return;
      l ? r(c) : t.value.push(c);
    }
  }, a = (i) => {
    if (We(i)) {
      const l = i;
      t.value = t.value.filter(({ uuid: c }) => c !== l.uuid);
    }
  };
  return Te(() => {
    e.aspectRatio.value && t.value.forEach((i) => {
      !i.manual && (i instanceof we || Bn(i)) && (i instanceof we ? i.aspect = e.aspectRatio.value : (i.left = e.width.value * -0.5, i.right = e.width.value * 0.5, i.top = e.height.value * 0.5, i.bottom = e.height.value * -0.5), i.updateProjectionMatrix());
    });
  }), Q(() => {
    t.value = [];
  }), {
    camera: n,
    cameras: t,
    registerCamera: s,
    deregisterCamera: a,
    setCameraActive: r
  };
};
function Bn(e) {
  return e.hasOwnProperty("isOrthographicCamera") && e.isOrthographicCamera;
}
const lt = j(), ct = j(), Ae = j(), ee = new tt();
let ue = 0, fe = 0;
const { pause: In, resume: Ne, isActive: Hn } = it(
  () => {
    lt.trigger({ delta: ue, elapsed: fe, clock: ee }), ct.trigger({ delta: ue, elapsed: fe, clock: ee }), Ae.trigger({ delta: ue, elapsed: fe, clock: ee });
  },
  { immediate: !1 }
);
Ae.on(() => {
  ue = ee.getDelta(), fe = ee.getElapsedTime();
});
let ze = !1;
const $r = () => (ze || (ze = !0, Ne()), {
  onBeforeLoop: lt.on,
  onLoop: ct.on,
  onAfterLoop: Ae.on,
  pause: In,
  resume: Ne,
  isActive: Hn
}), Ur = !0, oe = "[TresJS ▲ ■ ●] ";
function z() {
  function e(...r) {
    typeof r[0] == "string" ? r[0] = oe + r[0] : r.unshift(oe), console.error(...r);
  }
  function t(...r) {
    typeof r[0] == "string" ? r[0] = oe + r[0] : r.unshift(oe), console.warn(...r);
  }
  function n(r, s) {
  }
  return {
    logError: e,
    logWarning: t,
    logMessage: n
  };
}
function Fr(e) {
  return typeof e == "number" ? [e, e, e] : e instanceof Se ? [e.x, e.y, e.z] : e;
}
function $n(e) {
  return e instanceof ce ? e : Array.isArray(e) ? new ce(...e) : new ce(e);
}
class Un extends et.Mesh {
  constructor(...n) {
    super(...n);
    me(this, "type", "HightlightMesh");
    me(this, "createTime");
    this.createTime = Date.now();
  }
  onBeforeRender() {
    const r = (Date.now() - this.createTime) / 1e3, i = 1 + 0.07 * Math.sin(2.5 * r);
    this.scale.set(i, i, i);
  }
}
const ut = (e, t) => {
  for (const n of Object.keys(t))
    t[n] instanceof Object && Object.assign(t[n], ut(e[n], t[n]));
  return Object.assign(e || {}, t), e;
}, Fn = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot", Wn = /* @__PURE__ */ Gn(Fn);
function Ge(e) {
  return e && e.nodeType === 1;
}
function se(e) {
  return e.replace(/-([a-z])/g, (t, n) => n.toUpperCase());
}
const Nn = /\B([A-Z])/g;
function zn(e) {
  return e.replace(Nn, "-$1").toLowerCase();
}
function Gn(e, t) {
  const n = /* @__PURE__ */ Object.create(null), r = e.split(",");
  for (let s = 0; s < r.length; s++)
    n[r[s]] = !0;
  return (s) => !!n[s];
}
const Ve = (e, t) => {
  if (!t)
    return;
  const n = Array.isArray(t) ? t : t.match(/([^[.\]])+/g);
  return n == null ? void 0 : n.reduce((r, s) => r && r[s], e);
}, Vn = (e, t, n) => {
  const r = Array.isArray(t) ? t : t.match(/([^[.\]])+/g);
  r && r.reduce((s, a, i) => (s[a] === void 0 && (s[a] = {}), i === r.length - 1 && (s[a] = n), s[a]), e);
};
function ft(e, t) {
  if (Ge(e) && Ge(t)) {
    const s = e.attributes, a = t.attributes;
    return s.length !== a.length ? !1 : Array.from(s).every(({ name: i, value: l }) => t.getAttribute(i) === l);
  }
  if (e === t)
    return !0;
  if (e === null || typeof e != "object" || t === null || typeof t != "object")
    return !1;
  const n = Object.keys(e), r = Object.keys(t);
  if (n.length !== r.length)
    return !1;
  for (const s of n)
    if (!r.includes(s) || !ft(e[s], t[s]))
      return !1;
  return !0;
}
function Yn(e, t) {
  if (!Array.isArray(e) || !Array.isArray(t) || e.length !== t.length)
    return !1;
  for (let n = 0; n < e.length; n++)
    if (!ft(e[n], t[n]))
      return !1;
  return !0;
}
const qn = Array.isArray;
function Jn(e, t, n, r) {
  const s = (c) => {
    if (c.uuid === t)
      return c;
    for (const o of c.children) {
      const u = s(o);
      if (u)
        return u;
    }
  }, a = s(e);
  if (!a) {
    console.warn("Object with UUID not found in the scene.");
    return;
  }
  let i = a;
  for (let c = 0; c < n.length - 1; c++)
    if (i[n[c]] !== void 0)
      i = i[n[c]];
    else {
      console.warn(`Property path is not valid: ${n.join(".")}`);
      return;
    }
  const l = n[n.length - 1];
  i[l] !== void 0 ? i[l] = r : console.warn(`Property path is not valid: ${n.join(".")}`);
}
function Kn(e) {
  const t = new ot({
    color: 11003607,
    // Highlight color, e.g., yellow
    transparent: !0,
    opacity: 0.2,
    depthTest: !1,
    // So the highlight is always visible
    side: jt
    // To e
  });
  return new Un(e.geometry.clone(), t);
}
function Qn(e) {
  var n;
  let t = e.value;
  return e.value && ((n = e.value) != null && n.isMesh) && (t = e.value.position), Array.isArray(e.value) && (t = new Se(...t)), t;
}
function Xn(e) {
  return "map" in e;
}
function Ye(e) {
  Xn(e) && e.map && e.map.dispose(), e.dispose();
}
function dt(e) {
  var n, r;
  if (e.parent && ((n = e.removeFromParent) == null || n.call(e)), delete e.__tres, [...e.children].forEach((s) => dt(s)), !(e instanceof nt)) {
    const s = e;
    e && ((r = e.dispose) == null || r.call(e)), s.geometry && (s.geometry.dispose(), delete s.geometry), Array.isArray(s.material) ? (s.material.forEach((a) => Ye(a)), delete s.material) : s.material && (Ye(s.material), delete s.material);
  }
}
function Zn(e, t) {
  let n = 0;
  for (let r = 0; r < e.length; r++)
    t(e[r], r) && (e[n] = e[r], n++);
  return e.length = n, e;
}
function Pe(e, t) {
  let n = e;
  if (t.includes("-")) {
    const r = t.split("-");
    let s = r.shift();
    for (; n && r.length; )
      s in n ? (n = n[s], s = r.shift()) : s = qe(s, r.shift());
    return { target: n, key: qe(s, ...r) };
  } else
    return { target: n, key: t };
}
function qe(...e) {
  return e.map((t, n) => n === 0 ? t : t.charAt(0).toUpperCase() + t.slice(1)).join("");
}
const Je = /-\d+$/;
function er(e, t, n) {
  if (at(n)) {
    if (Je.test(n)) {
      const a = n.replace(Je, ""), { target: i, key: l } = Pe(e, a);
      if (!Array.isArray(i[l])) {
        const c = i[l], o = [];
        o.__tresDetach = () => {
          o.every((u) => be(u)) && (i[l] = c);
        }, i[l] = o;
      }
    }
    const { target: r, key: s } = Pe(e, n);
    t.__tres.previousAttach = r[s], r[s] = X(t);
  } else
    t.__tres.previousAttach = n(e, t);
}
function tr(e, t, n) {
  var r, s, a;
  if (at(n)) {
    const { target: i, key: l } = Pe(e, n), c = t.__tres.previousAttach;
    c === void 0 ? delete i[l] : i[l] = c, "__tresDetach" in i && i.__tresDetach();
  } else
    (s = (r = t.__tres) == null ? void 0 : r.previousAttach) == null || s.call(r, e, t);
  (a = t.__tres) == null || delete a.previousAttach;
}
function G(e, t, n) {
  const r = e;
  return r.__tres = {
    type: "unknown",
    eventCount: 0,
    root: n,
    handlers: {},
    memoizedProps: {},
    objects: [],
    parent: null,
    previousAttach: null,
    ...t
  }, r.__tres.attach || (r.isMaterial ? r.__tres.attach = "material" : r.isBufferGeometry ? r.__tres.attach = "geometry" : r.isFog && (r.__tres.attach = "fog")), r;
}
function pt(e) {
  var n;
  const t = (n = e == null ? void 0 : e.__tres) == null ? void 0 : n.root;
  t && t.render && t.render.canBeInvalidated.value && t.invalidate();
}
function nr(e, t, n) {
  var s;
  if (!V(e.setPixelRatio))
    return;
  let r = 0;
  if (de(n) && n.length >= 2) {
    const [a, i] = n;
    r = rt.clamp(t, a, i);
  } else kn(n) ? r = n : r = t;
  r !== ((s = e.getPixelRatio) == null ? void 0 : s.call(e)) && e.setPixelRatio(r);
}
function rr(e, t, n, r, s) {
  const a = [...t.__tres.objects], i = X(t);
  if (e = X(e), i === e)
    return !0;
  const l = G(e, t.__tres ?? {}, s), c = t.parent ?? t.__tres.parent ?? null, o = { ...t.__tres.memoizedProps };
  delete o.object;
  for (const u of a)
    mt(u, s), ht(u, s);
  i.__tres.objects = [], r.remove(t);
  for (const [u, v] of Object.entries(o))
    r.patchProp(l, u, l[u], v);
  n(e), r.insert(t, c);
  for (const u of a)
    r.insert(u, t);
  return !0;
}
function X(e) {
  return Dn(e) ? (e.object.__tres = e.__tres, e.object) : e;
}
function mt(e, t) {
  var r, s, a, i;
  const n = ((r = e.__tres) == null ? void 0 : r.parent) || t.scene.value;
  e.__tres && (e.__tres.parent = null), n && n.__tres && "objects" in n.__tres && Zn(n.__tres.objects, (l) => l !== e), (s = e.__tres) != null && s.attach ? tr(n, e, e.__tres.attach) : ((i = (a = e.parent) == null ? void 0 : a.remove) == null || i.call(a, X(e)), e.parent = null);
}
function ht(e, t) {
  var n;
  (n = e.traverse) == null || n.call(e, (r) => {
    var s;
    t.deregisterCamera(r), (s = t.eventManager) == null || s.deregisterPointerMissedObject(r);
  }), t.deregisterCamera(e), pt(e);
}
const or = Number.parseInt(Bt.replace("dev", "")), ie = {
  realistic: {
    shadows: !0,
    physicallyCorrectLights: !0,
    outputColorSpace: It,
    toneMapping: st,
    toneMappingExposure: 3,
    shadowMap: {
      enabled: !0,
      type: Ht
    }
  },
  flat: {
    toneMapping: $t,
    toneMappingExposure: 1
  }
};
function sr({
  canvas: e,
  options: t,
  contextParts: { sizes: n, render: r, invalidate: s, advance: a }
}) {
  const i = Y(() => ({
    alpha: k(t.alpha) ?? !0,
    depth: k(t.depth),
    canvas: Zt(e),
    context: k(t.context),
    stencil: k(t.stencil),
    antialias: k(t.antialias) ?? !0,
    precision: k(t.precision),
    powerPreference: k(t.powerPreference),
    premultipliedAlpha: k(t.premultipliedAlpha),
    preserveDrawingBuffer: k(t.preserveDrawingBuffer),
    logarithmicDepthBuffer: k(t.logarithmicDepthBuffer),
    failIfMajorPerformanceCaveat: k(t.failIfMajorPerformanceCaveat)
  })), l = H(new he(i.value));
  function c() {
    t.renderMode === "on-demand" && s();
  }
  le(i, () => {
    l.value.dispose(), l.value = new he(i.value), c();
  }), le([n.width, n.height], () => {
    l.value.setSize(n.width.value, n.height.value), c();
  }, {
    immediate: !0
  }), le(() => t.clearColor, c);
  const { pixelRatio: o } = en(), { logError: u } = z(), f = (() => {
    const p = new he(), P = {
      shadowMap: {
        enabled: p.shadowMap.enabled,
        type: p.shadowMap.type
      },
      toneMapping: p.toneMapping,
      toneMappingExposure: p.toneMappingExposure,
      outputColorSpace: p.outputColorSpace
    };
    return p.dispose(), P;
  })(), _ = k(t.renderMode);
  return _ === "on-demand" && s(), _ === "manual" && setTimeout(() => {
    a();
  }, 100), Te(() => {
    const p = k(t.preset);
    p && (p in ie || u(`Renderer Preset must be one of these: ${Object.keys(ie).join(", ")}`), ut(l.value, ie[p])), nr(l.value, o.value, k(t.dpr)), _ === "always" && (r.frames.value = Math.max(1, r.frames.value));
    const P = (g, E) => {
      const C = k(g), T = () => {
        if (p)
          return Ve(ie[p], E);
      };
      if (C !== void 0)
        return C;
      const M = T();
      return M !== void 0 ? M : Ve(f, E);
    }, m = (g, E) => Vn(l.value, E, P(g, E));
    m(t.shadows, "shadowMap.enabled"), m(t.toneMapping ?? st, "toneMapping"), m(t.shadowMapType, "shadowMap.type"), or < 150 && m(!t.useLegacyLights, "physicallyCorrectLights"), m(t.outputColorSpace, "outputColorSpace"), m(t.toneMappingExposure, "toneMappingExposure");
    const y = P(t.clearColor, "clearColor");
    y && l.value.setClearColor(
      y ? $n(y) : new ce(0)
      // default clear color is not easily/efficiently retrievable from three
    );
  }), Q(() => {
    l.value.dispose(), l.value.forceContextLoss();
  }), {
    renderer: l
  };
}
const ir = (e) => !!e && e.constructor === Array;
function ar(e) {
  const t = { nodes: {}, materials: {} };
  return e && e.traverse((n) => {
    n.name && (t.nodes[n.name] = n), n.material && !t.materials[n.material.name] && (t.materials[n.material.name] = n.material);
  }), t;
}
async function Wr(e, t, n, r, s) {
  const { logError: a } = z(), i = new e();
  s && s(i), n && n(i);
  const c = (Array.isArray(t) ? t : [t]).map(
    (o) => new Promise((u, v) => {
      i.load(
        o,
        (f) => {
          const _ = f;
          _.scene && Object.assign(_, ar(_.scene)), u(_);
        },
        r,
        (f) => v(a("[useLoader] - Failed to load resource", f))
      );
    })
  );
  return ir(t) ? await Promise.all(c) : await c[0];
}
async function Nr(e, t) {
  const n = new Ut(t), r = (s) => new Promise((a, i) => {
    n.load(
      s,
      (l) => a(l),
      () => null,
      () => {
        i(new Error("[useTextures] - Failed to load texture"));
      }
    );
  });
  if (qn(e)) {
    const s = await Promise.all(e.map((a) => r(a)));
    return e.length > 1 ? s : s[0];
  } else {
    const {
      map: s,
      displacementMap: a,
      normalMap: i,
      roughnessMap: l,
      metalnessMap: c,
      aoMap: o,
      alphaMap: u,
      matcap: v
    } = e;
    return {
      map: s ? await r(s) : null,
      displacementMap: a ? await r(a) : null,
      normalMap: i ? await r(i) : null,
      roughnessMap: l ? await r(l) : null,
      metalnessMap: c ? await r(c) : null,
      aoMap: o ? await r(o) : null,
      alphaMap: u ? await r(u) : null,
      matcap: v ? await r(v) : null
    };
  }
}
const lr = (e, t) => {
  const n = Y(() => t.renderer.value.domElement), r = H([]), { x: s, y: a } = tn({ target: n });
  let i = 0;
  const { width: l, height: c, top: o, left: u } = nn(n), v = ({ x: h, y: S }) => {
    if (n.value)
      return {
        x: (h - u.value) / l.value * 2 - 1,
        y: -((S - o.value) / c.value) * 2 + 1
      };
  }, f = ({ x: h, y: S }) => {
    if (t.camera.value)
      return t.raycaster.value.setFromCamera(new ge(h, S), t.camera.value), r.value = t.raycaster.value.intersectObjects(e.value, !0), r.value;
  }, _ = (h) => {
    const S = v({
      x: (h == null ? void 0 : h.clientX) ?? s.value,
      y: (h == null ? void 0 : h.clientY) ?? a.value
    });
    return S ? f(S) || [] : [];
  }, p = j(), P = j(), m = j(), y = j(), g = j(), E = j(), C = j(), T = j();
  function M(h) {
    const S = {};
    for (const U in h)
      typeof U != "function" && (S[U] = h[U]);
    return S;
  }
  const w = (h, S) => {
    var Oe, De, je;
    const U = M(S), ne = new Se(S == null ? void 0 : S.clientX, S == null ? void 0 : S.clientY, 0).unproject((Oe = t.camera) == null ? void 0 : Oe.value);
    h.trigger({
      ...U,
      intersections: r.value,
      // The unprojectedPoint is wrong, math needs to be fixed
      unprojectedPoint: ne,
      ray: (De = t.raycaster) == null ? void 0 : De.value.ray,
      camera: (je = t.camera) == null ? void 0 : je.value,
      sourceEvent: S,
      delta: i,
      stopPropagating: !1
    });
  };
  let L;
  const x = (h) => {
    _(h), w(m, h), L = h;
  }, d = () => {
    L && x(L);
  };
  let b, A, D;
  const $ = (h) => {
    var S;
    b = (S = r.value[0]) == null ? void 0 : S.object, i = 0, A = new ge(
      (h == null ? void 0 : h.clientX) ?? s.value,
      (h == null ? void 0 : h.clientY) ?? a.value
    ), w(g, h);
  };
  let R, O = !1;
  const q = (h) => {
    var S, U, ne;
    h instanceof PointerEvent && (r.value.length === 0 && w(E, h), b === ((S = r.value[0]) == null ? void 0 : S.object) && (D = new ge(
      (h == null ? void 0 : h.clientX) ?? s.value,
      (h == null ? void 0 : h.clientY) ?? a.value
    ), i = A == null ? void 0 : A.distanceTo(D), h.button === 0 ? (w(p, h), R === ((U = r.value[0]) == null ? void 0 : U.object) ? O = !0 : (R = (ne = r.value[0]) == null ? void 0 : ne.object, O = !1)) : h.button === 2 && w(C, h)), w(y, h));
  }, xe = (h) => {
    O && (w(P, h), R = void 0, O = !1);
  }, Le = (h) => w(m, h), Re = (h) => w(T, h);
  return n.value.addEventListener("pointerup", q), n.value.addEventListener("pointerdown", $), n.value.addEventListener("pointermove", x), n.value.addEventListener("pointerleave", Le), n.value.addEventListener("dblclick", xe), n.value.addEventListener("wheel", Re), Q(() => {
    n != null && n.value && (n.value.removeEventListener("pointerup", q), n.value.removeEventListener("pointerdown", $), n.value.removeEventListener("pointermove", x), n.value.removeEventListener("pointerleave", Le), n.value.removeEventListener("dblclick", xe), n.value.removeEventListener("wheel", Re));
  }), {
    intersects: r,
    onClick: (h) => p.on(h).off,
    onDblClick: (h) => P.on(h).off,
    onContextMenu: (h) => C.on(h).off,
    onPointerMove: (h) => m.on(h).off,
    onPointerUp: (h) => y.on(h).off,
    onPointerDown: (h) => g.on(h).off,
    onPointerMissed: (h) => E.on(h).off,
    onWheel: (h) => T.on(h).off,
    forceUpdate: d
  };
};
function zr() {
  const { logWarning: e } = z();
  function t(a, i, l) {
    let c = null;
    return a.traverse((o) => {
      o[i] === l && (c = o);
    }), c || e(`Child with ${i} '${l}' not found.`), c;
  }
  function n(a, i, l) {
    const c = [];
    return a.traverse((o) => {
      o[i].includes(l) && c.push(o);
    }), c.length || e(`Children with ${i} '${l}' not found.`), c;
  }
  function r(a, i) {
    return t(a, "name", i);
  }
  function s(a, i) {
    return n(a, "name", i);
  }
  return {
    seek: t,
    seekByName: r,
    seekAll: n,
    seekAllByName: s
  };
}
function ke(e) {
  let t = 0;
  return e.traverse((n) => {
    if (n.isMesh && n.geometry) {
      const r = n.geometry, s = r.attributes.position.count * 3 * Float32Array.BYTES_PER_ELEMENT, a = r.index ? r.index.count * Uint32Array.BYTES_PER_ELEMENT : 0, i = r.attributes.normal ? r.attributes.normal.count * 3 * Float32Array.BYTES_PER_ELEMENT : 0, l = r.attributes.uv ? r.attributes.uv.count * 2 * Float32Array.BYTES_PER_ELEMENT : 0, c = s + a + i + l;
      t += c;
    }
  }), t;
}
function cr(e) {
  return (e / 1024).toFixed(2);
}
const Me = I({}), Ce = (e) => Object.assign(Me.value, e);
function ur(e, t, n) {
  var x;
  const r = H(), s = H();
  e && (r.value = e), t && (s.value = t);
  const a = (d) => {
    var b;
    return ((b = d.__tres) == null ? void 0 : b.eventCount) > 0;
  }, i = (d) => {
    var b;
    return ((b = d.children) == null ? void 0 : b.some((A) => i(A))) || a(d);
  }, l = H(((x = r.value) == null ? void 0 : x.children).filter(i) || []);
  function c(d, b) {
    if (Array.isArray(d))
      for (const A of d)
        A(b);
    typeof d == "function" && d(b);
  }
  function o(d, b) {
    const A = [], D = () => b.stopPropagating = !0;
    b.stopPropagation = D;
    for (const $ of b == null ? void 0 : b.intersections) {
      if (b.stopPropagating)
        return;
      b = { ...b, ...$ };
      const { object: R } = $;
      b.eventObject = R, c(R[d], b), A.push(R);
      let O = R.parent;
      for (; O !== null && !b.stopPropagating && !A.includes(O); )
        b.eventObject = O, c(O[d], b), A.push(O), O = O.parent;
      const q = zn(d.slice(2));
      n(q, { intersection: $, event: b });
    }
  }
  const {
    onClick: u,
    onDblClick: v,
    onContextMenu: f,
    onPointerMove: _,
    onPointerDown: p,
    onPointerUp: P,
    onPointerMissed: m,
    onWheel: y,
    forceUpdate: g
  } = lr(l, t);
  P((d) => o("onPointerUp", d)), p((d) => o("onPointerDown", d)), u((d) => o("onClick", d)), v((d) => o("onDoubleClick", d)), f((d) => o("onContextMenu", d)), y((d) => o("onWheel", d));
  let E = [];
  _((d) => {
    const b = d.intersections.map(({ object: D }) => D), A = d.intersections;
    E.forEach(({ object: D }) => {
      b.includes(D) || (d.intersections = E, o("onPointerLeave", d), o("onPointerOut", d));
    }), d.intersections = A, d.intersections.forEach(({ object: D }) => {
      E.includes(D) || (o("onPointerEnter", d), o("onPointerOver", d));
    }), o("onPointerMove", d), E = d.intersections;
  });
  const C = [];
  m((d) => {
    const b = () => d.stopPropagating = !0;
    d.stopPropagation = b, C.forEach((A) => {
      d.stopPropagating || (d.eventObject = A, c(A.onPointerMissed, d));
    }), n("pointer-missed", { event: d });
  });
  function T(d) {
    re(d) && W(d) && l.value.push(d);
  }
  function M(d) {
    if (re(d) && W(d)) {
      const b = l.value.indexOf(d);
      b > -1 && l.value.splice(b, 1);
    }
  }
  function w(d) {
    re(d) && W(d) && d.onPointerMissed && C.push(d);
  }
  function L(d) {
    if (re(d) && W(d)) {
      const b = C.indexOf(d);
      b > -1 && C.splice(b, 1);
    }
  }
  return t.eventManager = {
    forceUpdate: g,
    registerObject: T,
    deregisterObject: M,
    registerPointerMissedObject: w,
    deregisterPointerMissedObject: L
  }, {
    forceUpdate: g,
    registerObject: T,
    deregisterObject: M,
    registerPointerMissedObject: w,
    deregisterPointerMissedObject: L
  };
}
function fr(e, t, n = 10) {
  const r = k(e) ? rn() : on(Y(() => k(t).parentElement)), s = ye(Fe(r.width, n)), a = ye(Fe(r.height, n)), i = Y(() => s.value / a.value);
  return {
    height: a,
    width: s,
    aspectRatio: i
  };
}
function ve() {
  const e = /* @__PURE__ */ new Map(), t = /* @__PURE__ */ new Set();
  let n = 0, r = !1;
  const s = () => {
    const o = Array.from(e.entries()).sort((u, v) => {
      const f = u[1].priority - v[1].priority;
      return f === 0 ? u[1].addI - v[1].addI : f;
    });
    t.clear(), o.forEach((u) => t.add(u[0]));
  }, a = (o) => {
    e.delete(o), t.delete(o);
  };
  return { on: (o, u = 0) => {
    e.set(o, { priority: u, addI: n++ });
    const v = () => a(o);
    return sn(v), r = !0, {
      off: v
    };
  }, off: a, trigger: (...o) => {
    r && (s(), r = !1), t.forEach((u) => u(...o));
  }, dispose: () => {
    e.clear(), t.clear();
  }, get count() {
    return e.size;
  } };
}
function dr() {
  let e = !0, t = !0, n = !1;
  const r = new tt(!1), s = I(r.running), a = I(!1);
  let i;
  const l = rt.generateUUID();
  let c = null;
  const o = ve(), u = ve(), v = ve();
  M();
  let f = {};
  function _(w) {
    f = w;
  }
  function p(w, L, x = 0) {
    switch (L) {
      case "before":
        return o.on(w, x);
      case "render":
        return c || (c = w), u.dispose(), u.on(w);
      case "after":
        return v.on(w, x);
    }
  }
  function P() {
    t && (t = !1, M(), T());
  }
  function m() {
    t = !0, M(), cancelAnimationFrame(i);
  }
  function y() {
    n = !1, M();
  }
  function g() {
    n = !0, M();
  }
  function E() {
    a.value = !0;
  }
  function C() {
    a.value = !1;
  }
  function T() {
    if (!e) {
      i = requestAnimationFrame(T);
      return;
    }
    const w = r.getDelta(), L = r.getElapsedTime(), x = {
      camera: K(f.camera),
      scene: K(f.scene),
      renderer: K(f.renderer),
      raycaster: K(f.raycaster),
      controls: K(f.controls),
      invalidate: f.invalidate,
      advance: f.advance
    }, d = { delta: w, elapsed: L, clock: r, ...x };
    s.value && o.trigger(d), a.value || (u.count ? u.trigger(d) : c && c(d)), s.value && v.trigger(d), i = requestAnimationFrame(T);
  }
  function M() {
    const w = !t && !n;
    r.running !== w && (r.running ? r.stop() : r.start()), s.value = r.running;
  }
  return {
    loopId: l,
    register: (w, L, x) => p(w, L, x),
    start: P,
    stop: m,
    pause: g,
    resume: y,
    pauseRender: E,
    resumeRender: C,
    isRenderPaused: a,
    isActive: s,
    setContext: _,
    setReady: (w) => e = w
  };
}
function pr(e, t, n = 100) {
  n = n <= 0 ? 100 : n;
  const r = j(), s = /* @__PURE__ */ new Set();
  let a = !1, i = !1, l = null;
  function c() {
    l && clearTimeout(l), !i && !a && e() ? (r.trigger(t), s.forEach((f) => f()), s.clear(), a = !0) : !i && !a && (l = setTimeout(c, n));
  }
  function o() {
    i = !0, l && clearTimeout(l);
  }
  c();
  const u = (f, ..._) => {
    f(..._);
  };
  return {
    on: (f) => {
      if (a)
        return u(f, t), { off: () => {
        } };
      {
        const _ = r.on(f);
        return s.add(_.off), r.on(f);
      }
    },
    off: r.off,
    trigger: r.trigger,
    cancel: o
  };
}
const te = /* @__PURE__ */ new WeakMap();
function gt(e) {
  if (e = e || pe(), te.has(e))
    return te.get(e);
  const t = 100, n = Date.now(), a = pr(() => {
    if (Date.now() - n >= t)
      return !0;
    {
      const i = e.renderer.value, l = (i == null ? void 0 : i.domElement) || { width: 0, height: 0 };
      return !!(i && l.width > 0 && l.height > 0);
    }
  }, e);
  return te.set(e, a), a;
}
function Gr(e) {
  const t = pe();
  if (t)
    return te.has(t) ? te.get(t).on(e) : gt(t).on(e);
}
function mr({
  scene: e,
  canvas: t,
  windowSize: n,
  disableRender: r,
  rendererOptions: s,
  emit: a
}) {
  const { logWarning: i } = z(), l = H(e), c = fr(n, t), {
    camera: o,
    cameras: u,
    registerCamera: v,
    deregisterCamera: f,
    setCameraActive: _
  } = jn({ sizes: c, scene: e }), p = {
    mode: I(s.renderMode || "always"),
    priority: I(0),
    frames: I(0),
    maxFrames: 60,
    canBeInvalidated: Y(() => p.mode.value === "on-demand" && p.frames.value === 0)
  };
  function P(R = 1) {
    s.renderMode === "on-demand" ? p.frames.value = Math.min(p.maxFrames, p.frames.value + R) : i("`invalidate` can only be used when `renderMode` is set to `on-demand`");
  }
  function m() {
    s.renderMode === "manual" ? p.frames.value = 1 : i("`advance` can only be used when `renderMode` is set to `manual`");
  }
  const { renderer: y } = sr(
    {
      scene: e,
      canvas: t,
      options: s,
      emit: a,
      // TODO: replace contextParts with full ctx at https://github.com/Tresjs/tres/issues/516
      contextParts: { sizes: c, camera: o, render: p, invalidate: P, advance: m },
      disableRender: r
    }
  ), g = {
    sizes: c,
    scene: l,
    camera: o,
    cameras: ye(u),
    renderer: y,
    raycaster: H(new Ft()),
    controls: I(null),
    perf: {
      maxFrames: 160,
      fps: {
        value: 0,
        accumulator: []
      },
      memory: {
        currentMem: 0,
        allocatedMem: 0,
        accumulator: []
      }
    },
    render: p,
    advance: m,
    extend: Ce,
    invalidate: P,
    registerCamera: v,
    setCameraActive: _,
    deregisterCamera: f,
    loop: dr()
  };
  _e("useTres", g), g.scene.value.__tres = {
    root: g
  }, g.loop.register(() => {
    o.value && p.frames.value > 0 && (y.value.render(e, o.value), a("render", g.renderer.value)), p.priority.value = 0, p.mode.value === "always" ? p.frames.value = 1 : p.frames.value = Math.max(0, p.frames.value - 1);
  }, "render");
  const { on: E, cancel: C } = gt(g);
  g.loop.setReady(!1), g.loop.start(), E(() => {
    a("ready", g), g.loop.setReady(!0), ur(e, g, a);
  }), Q(() => {
    C(), g.loop.stop();
  });
  const T = 100, M = an({ every: T }), { isSupported: w, memory: L } = ln({ interval: T }), x = 160;
  let d = performance.now();
  const b = ({ timestamp: R }) => {
    g.scene.value && (g.perf.memory.allocatedMem = ke(g.scene.value)), R - d >= T && (d = R, g.perf.fps.accumulator.push(M.value), g.perf.fps.accumulator.length > x && g.perf.fps.accumulator.shift(), g.perf.fps.value = M.value, w.value && L.value && (g.perf.memory.accumulator.push(L.value.usedJSHeapSize / 1024 / 1024), g.perf.memory.accumulator.length > x && g.perf.memory.accumulator.shift(), g.perf.memory.currentMem = g.perf.memory.accumulator.reduce((O, q) => O + q, 0) / g.perf.memory.accumulator.length));
  };
  let A = 0;
  const D = 1, { pause: $ } = it(({ delta: R }) => {
    window.__TRES__DEVTOOLS__ && (b({ timestamp: performance.now() }), A += R, A >= D && (window.__TRES__DEVTOOLS__.cb(g), A = 0));
  }, { immediate: !0 });
  return Q(() => {
    $();
  }), g;
}
function pe() {
  const e = Mt("useTres");
  if (!e)
    throw new Error("useTresContext must be used together with useTresContextProvider");
  return e;
}
const Vr = pe;
function Yr() {
  const {
    camera: e,
    scene: t,
    renderer: n,
    loop: r,
    raycaster: s,
    controls: a,
    invalidate: i,
    advance: l
  } = pe();
  r.setContext({
    camera: e,
    scene: t,
    renderer: n,
    raycaster: s,
    controls: a,
    invalidate: i,
    advance: l
  });
  function c(v, f = 0) {
    return r.register(v, "before", f);
  }
  function o(v) {
    return r.register(v, "render");
  }
  function u(v, f = 0) {
    return r.register(v, "after", f);
  }
  return {
    pause: r.pause,
    resume: r.resume,
    pauseRender: r.pauseRender,
    resumeRender: r.resumeRender,
    isActive: r.isActive,
    onBeforeRender: c,
    render: o,
    onAfterRender: u
  };
}
function hr(e, t = {}, n = {}) {
  let r = e;
  const s = (l) => {
    r = l;
  };
  let a = new Proxy({}, {});
  const i = {
    has(l, c) {
      return c in t || c in r;
    },
    get(l, c, o) {
      return c in t ? t[c](r) : r[c];
    },
    set(l, c, o) {
      return n[c] ? n[c](o, r, a, s) : r[c] = o, !0;
    }
  };
  return a = new Proxy({}, i), a;
}
const { logError: Ke } = z(), Qe = [
  "onClick",
  "onContextMenu",
  "onPointerMove",
  "onPointerEnter",
  "onPointerLeave",
  "onPointerOver",
  "onPointerOut",
  "onDoubleClick",
  "onPointerDown",
  "onPointerUp",
  "onPointerCancel",
  "onPointerMissed",
  "onLostPointerCapture",
  "onWheel"
], gr = (e) => {
  const t = e.scene.value;
  function n(o, u, v, f) {
    if (f || (f = {}), f.args || (f.args = []), o === "template" || Wn(o))
      return null;
    let _ = o.replace("Tres", ""), p;
    if (o === "primitive") {
      (!N(f.object) || Ct(f.object)) && Ke(
        "Tres primitives need an 'object' prop, whose value is an object or shallowRef<object>"
      ), _ = f.object.type;
      const P = {};
      p = hr(
        f.object,
        {
          object: (y) => y,
          isPrimitive: () => !0,
          __tres: () => P
        },
        {
          object: (y, g, E, C) => {
            rr(y, E, C, { patchProp: a, remove: s, insert: r }, e);
          },
          __tres: (y) => {
            Object.assign(P, y);
          }
        }
      );
    } else {
      const P = Me.value[_];
      P || Ke(
        `${_} is not defined on the THREE namespace. Use extend to add it to the catalog.`
      ), p = new P(...f.args);
    }
    return p ? (p.isCamera && (f != null && f.position || p.position.set(3, 3, 3), f != null && f.lookAt || p.lookAt(0, 0, 0)), p = G(p, {
      ...p.__tres,
      type: _,
      memoizedProps: f,
      eventCount: 0,
      primitive: o === "primitive",
      attach: f.attach
    }, e), p) : null;
  }
  function r(o, u) {
    var _, p, P;
    if (!o)
      return;
    u = u || t;
    const v = o.__tres ? o : G(o, {}, e), f = u.__tres ? u : G(u, {}, e);
    o = X(v), u = X(f), o.__tres && ((_ = o.__tres) == null ? void 0 : _.eventCount) > 0 && ((p = e.eventManager) == null || p.registerObject(o)), e.registerCamera(o), (P = e.eventManager) == null || P.registerPointerMissedObject(o), v.__tres.attach ? er(f, v, v.__tres.attach) : W(o) && W(f) && (f.add(o), o.dispatchEvent({ type: "added" })), v.__tres.parent = f, f.__tres.objects && !f.__tres.objects.includes(v) && f.__tres.objects.push(v);
  }
  function s(o, u) {
    var p, P, m, y;
    if (!o)
      return;
    o != null && o.__tres && ((p = o.__tres) == null ? void 0 : p.eventCount) > 0 && ((P = e.eventManager) == null || P.deregisterObject(o)), u = be(u) ? "default" : u;
    const v = (m = o.__tres) == null ? void 0 : m.dispose;
    be(v) || (v === null ? u = !1 : u = v);
    const f = (y = o.__tres) == null ? void 0 : y.primitive, _ = u === "default" ? !f : !!u;
    if (o.__tres && "objects" in o.__tres && [...o.__tres.objects].forEach((g) => s(g, u)), _ && o.children && [...o.children].forEach((g) => s(g, u)), mt(o, e), ht(o, e), _ && !On(o)) {
      if (V(u))
        u(o);
      else if (V(o.dispose))
        try {
          o.dispose();
        } catch {
        }
    }
    "__tres" in o && delete o.__tres;
  }
  function a(o, u, v, f) {
    var g, E;
    if (!o)
      return;
    let _ = o, p = u;
    if (o.__tres && (o.__tres.memoizedProps[u] = f), u === "attach") {
      const C = ((g = o.__tres) == null ? void 0 : g.parent) || o.parent;
      s(o), G(o, { attach: f }, e), C && r(o, C);
      return;
    }
    if (u === "dispose") {
      o.__tres || (o = G(o, {}, e)), o.__tres.dispose = f;
      return;
    }
    if (W(o) && p === "blocks-pointer-events") {
      f || f === "" ? o[p] = f : delete o[p];
      return;
    }
    Qe.includes(u) && o.__tres && (o.__tres.eventCount += 1);
    let P = se(p), m = _ == null ? void 0 : _[P];
    if (p === "args") {
      const C = o, T = v ?? [], M = f ?? [], w = ((E = o.__tres) == null ? void 0 : E.type) || o.type;
      w && T.length && !Yn(T, M) && (_ = Object.assign(
        C,
        new Me.value[w](...f)
      ));
      return;
    }
    if (_.type === "BufferGeometry") {
      if (p === "args")
        return;
      _.setAttribute(
        se(p),
        new Wt(...f)
      );
      return;
    }
    if (p.includes("-") && m === void 0) {
      const C = p.split("-");
      m = C.reduce((T, M) => T[se(M)], _), p = C.pop(), P = p, m != null && m.set || (_ = C.reduce((T, M) => T[se(M)], _));
    }
    let y = f;
    if (y === "" && (y = !0), V(m)) {
      Qe.includes(u) || (de(y) ? o[P](...y) : o[P](y)), P.startsWith("on") && V(y) && (_[P] = y);
      return;
    }
    !(m != null && m.set) && !V(m) ? _[P] = y : m.constructor === y.constructor && (m != null && m.copy) ? m == null || m.copy(y) : de(y) ? m.set(...y) : !m.isColor && m.setScalar ? m.setScalar(y) : m.set(y), pt(o);
  }
  function i(o) {
    var u;
    return ((u = o == null ? void 0 : o.__tres) == null ? void 0 : u.parent) || null;
  }
  function l(o) {
    const u = G(new Nt(), { type: "Comment" }, e);
    return u.name = o, u;
  }
  function c(o) {
    var _;
    const u = i(o), v = ((_ = u == null ? void 0 : u.__tres) == null ? void 0 : _.objects) || [], f = v.indexOf(o);
    return f < 0 || f >= v.length - 1 ? null : v[f + 1];
  }
  return {
    insert: r,
    remove: s,
    createElement: n,
    patchProp: a,
    parentNode: i,
    createText: () => void 0,
    createComment: l,
    setText: () => void 0,
    setElementText: () => void 0,
    nextSibling: c,
    querySelector: () => void 0,
    setScopeId: () => void 0,
    cloneNode: () => void 0,
    insertStaticContent: () => void 0
  };
};
function vr() {
  return vt().__VUE_DEVTOOLS_GLOBAL_HOOK__;
}
function vt() {
  return typeof navigator < "u" && typeof window < "u" ? window : typeof globalThis < "u" ? globalThis : {};
}
const yr = typeof Proxy == "function", _r = "devtools-plugin:setup", wr = "plugin:settings:set";
let J, Ee;
function br() {
  var e;
  return J !== void 0 || (typeof window < "u" && window.performance ? (J = !0, Ee = window.performance) : typeof globalThis < "u" && (!((e = globalThis.perf_hooks) === null || e === void 0) && e.performance) ? (J = !0, Ee = globalThis.perf_hooks.performance) : J = !1), J;
}
function Pr() {
  return br() ? Ee.now() : Date.now();
}
class Mr {
  constructor(t, n) {
    this.target = null, this.targetQueue = [], this.onQueue = [], this.plugin = t, this.hook = n;
    const r = {};
    if (t.settings)
      for (const i in t.settings) {
        const l = t.settings[i];
        r[i] = l.defaultValue;
      }
    const s = `__vue-devtools-plugin-settings__${t.id}`;
    let a = Object.assign({}, r);
    try {
      const i = localStorage.getItem(s), l = JSON.parse(i);
      Object.assign(a, l);
    } catch {
    }
    this.fallbacks = {
      getSettings() {
        return a;
      },
      setSettings(i) {
        try {
          localStorage.setItem(s, JSON.stringify(i));
        } catch {
        }
        a = i;
      },
      now() {
        return Pr();
      }
    }, n && n.on(wr, (i, l) => {
      i === this.plugin.id && this.fallbacks.setSettings(l);
    }), this.proxiedOn = new Proxy({}, {
      get: (i, l) => this.target ? this.target.on[l] : (...c) => {
        this.onQueue.push({
          method: l,
          args: c
        });
      }
    }), this.proxiedTarget = new Proxy({}, {
      get: (i, l) => this.target ? this.target[l] : l === "on" ? this.proxiedOn : Object.keys(this.fallbacks).includes(l) ? (...c) => (this.targetQueue.push({
        method: l,
        args: c,
        resolve: () => {
        }
      }), this.fallbacks[l](...c)) : (...c) => new Promise((o) => {
        this.targetQueue.push({
          method: l,
          args: c,
          resolve: o
        });
      })
    });
  }
  async setRealTarget(t) {
    this.target = t;
    for (const n of this.onQueue)
      this.target.on[n.method](...n.args);
    for (const n of this.targetQueue)
      n.resolve(await this.target[n.method](...n.args));
  }
}
function Cr(e, t) {
  const n = e, r = vt(), s = vr(), a = yr && n.enableEarlyProxy;
  if (s && (r.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !a))
    s.emit(_r, e, t);
  else {
    const i = a ? new Mr(n, s) : null;
    (r.__VUE_DEVTOOLS_PLUGINS__ = r.__VUE_DEVTOOLS_PLUGINS__ || []).push({
      pluginDescriptor: n,
      setupFn: t,
      proxy: i
    }), i && t(i.proxiedTarget);
  }
}
function Er(e, t) {
  const n = `▲ ■ ●${e}`;
  typeof Xe == "function" ? Xe(n, t) : console.log(n);
}
function Xe(e, t) {
  throw new Error(e + t);
}
const yt = (e) => {
  const t = {
    id: e.uuid,
    label: e.type,
    children: [],
    tags: []
  };
  e.name !== "" && t.tags.push({
    label: e.name,
    textColor: 5750629,
    backgroundColor: 15793395
  });
  const n = ke(e);
  return n > 0 && t.tags.push({
    label: `${cr(n)} KB`,
    textColor: 15707189,
    backgroundColor: 16775644,
    tooltip: "Memory usage"
  }), e.type.includes("Light") && (t.tags.push({
    label: `${e.intensity}`,
    textColor: 9738662,
    backgroundColor: 16316922,
    tooltip: "Intensity"
  }), t.tags.push({
    label: `#${e.color.getHexString()}`,
    textColor: 9738662,
    backgroundColor: 16316922,
    tooltip: "Color"
  })), e.type.includes("Camera") && (t.tags.push({
    label: `${e.fov}°`,
    textColor: 9738662,
    backgroundColor: 16316922,
    tooltip: "Field of view"
  }), t.tags.push({
    label: `x: ${Math.round(e.position.x)} y: ${Math.round(e.position.y)} z: ${Math.round(e.position.z)}`,
    textColor: 9738662,
    backgroundColor: 16316922,
    tooltip: "Position"
  })), t;
};
function _t(e, t, n = "") {
  e.children.forEach((r) => {
    if (r.type === "HightlightMesh" || n && !r.type.includes(n) && !r.name.includes(n))
      return;
    const s = yt(r);
    t.children.push(s), _t(r, s, n);
  });
}
const Tr = [], Z = "tres:inspector", Sr = Et({
  sceneGraph: null
});
function Ar(e, t) {
  Cr(
    {
      id: "dev.esm.tres",
      label: "TresJS 🪐",
      logo: "https://raw.githubusercontent.com/Tresjs/tres/main/public/favicon.svg",
      packageName: "tresjs",
      homepage: "https://tresjs.org",
      componentStateTypes: Tr,
      app: e
    },
    (n) => {
      typeof n.now != "function" && Er(
        "You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html."
      ), n.addInspector({
        id: Z,
        label: "TresJS 🪐",
        icon: "account_tree",
        treeFilterPlaceholder: "Search instances"
      }), setInterval(() => {
        n.sendInspectorTree(Z);
      }, 1e3), setInterval(() => {
        n.notifyComponentUpdate();
      }, 5e3), n.on.getInspectorTree((a) => {
        if (a.inspectorId === Z) {
          const i = yt(t.scene.value);
          _t(t.scene.value, i, a.filter), Sr.sceneGraph = i, a.rootNodes = [i];
        }
      });
      let r = null, s = null;
      n.on.getInspectorState((a) => {
        var i;
        if (a.inspectorId === Z) {
          const [l] = t.scene.value.getObjectsByProperty("uuid", a.nodeId);
          if (!l)
            return;
          if (s && r && r.parent && s.remove(r), l.isMesh) {
            const c = Kn(l);
            l.add(c), r = c, s = l;
          }
          a.state = {
            object: Object.entries(l).map(([c, o]) => ({ key: c, value: o, editable: !0 })).filter(({ key: c }) => c !== "parent")
          }, l.isScene && (a.state.info = {
            memory: ke(l),
            objects: l.children.length,
            calls: t.renderer.value.info.render.calls,
            triangles: t.renderer.value.info.render.triangles,
            points: t.renderer.value.info.render.points,
            lines: t.renderer.value.info.render.lines
          }, a.state.programs = ((i = t.renderer.value.info.programs) == null ? void 0 : i.map((c) => ({
            key: c.name,
            value: {
              ...c,
              vertexShader: c.vertexShader,
              attributes: c.getAttributes(),
              uniforms: c.getUniforms()
            }
          }))) || []);
        }
      }), n.on.editInspectorState((a) => {
        a.inspectorId === Z && Jn(t.scene.value, a.nodeId, a.path, a.state.value);
      });
    }
  );
}
const kr = ["data-scene", "data-tres"], xr = /* @__PURE__ */ Be({
  __name: "TresCanvas",
  props: {
    shadows: { type: Boolean, default: void 0 },
    clearColor: {},
    toneMapping: {},
    shadowMapType: {},
    useLegacyLights: { type: Boolean, default: void 0 },
    outputColorSpace: {},
    toneMappingExposure: {},
    renderMode: { default: "always" },
    dpr: {},
    camera: {},
    preset: {},
    windowSize: { type: Boolean, default: void 0 },
    disableRender: { type: Boolean, default: void 0 },
    context: {},
    precision: {},
    alpha: { type: Boolean, default: void 0 },
    premultipliedAlpha: { type: Boolean },
    antialias: { type: Boolean, default: void 0 },
    stencil: { type: Boolean, default: void 0 },
    preserveDrawingBuffer: { type: Boolean, default: void 0 },
    powerPreference: {},
    depth: { type: Boolean, default: void 0 },
    logarithmicDepthBuffer: { type: Boolean, default: void 0 },
    failIfMajorPerformanceCaveat: { type: Boolean, default: void 0 }
  },
  emits: [
    "render",
    "click",
    "double-click",
    "context-menu",
    "pointer-move",
    "pointer-up",
    "pointer-down",
    "pointer-enter",
    "pointer-leave",
    "pointer-over",
    "pointer-out",
    "pointer-missed",
    "wheel",
    "ready"
  ],
  setup(e, { expose: t, emit: n }) {
    var P;
    const r = e, s = n, a = Tt(), { logWarning: i } = z(), l = I(), c = H(new nt()), o = (P = Ie()) == null ? void 0 : P.appContext.app;
    Ce(et);
    const u = (m) => Be({
      setup() {
        var g;
        const y = (g = Ie()) == null ? void 0 : g.appContext;
        return y && (y.app = o), _e("useTres", m), _e("extend", Ce), typeof window < "u" && Ar(y == null ? void 0 : y.app, m), () => He(Ot, null, a != null && a.default ? a.default() : []);
      }
    }), v = (m) => {
      const y = u(m), { render: g } = Rt(gr(m));
      g(He(y), c.value);
    }, f = (m, y = !1) => {
      dt(m.scene.value), y && (m.renderer.value.dispose(), m.renderer.value.renderLists.dispose(), m.renderer.value.forceContextLoss()), c.value.__tres = {
        root: m
      }, v(m);
    }, _ = Y(() => r.disableRender), p = H(null);
    return t({ context: p, dispose: () => f(p.value, !0) }), St(() => {
      const m = l;
      p.value = mr({
        scene: c.value,
        canvas: m,
        windowSize: r.windowSize ?? !1,
        disableRender: _.value ?? !1,
        rendererOptions: r,
        emit: s
      });
      const { registerCamera: y, camera: g, cameras: E, deregisterCamera: C } = p.value;
      v(p.value);
      const T = () => {
        const M = new we(
          45,
          window.innerWidth / window.innerHeight,
          0.1,
          1e3
        );
        M.position.set(3, 3, 3), M.lookAt(0, 0, 0), y(M);
        const w = Te(() => {
          E.value.length >= 2 && (M.removeFromParent(), C(M), w == null || w());
        });
      };
      le(
        () => r.camera,
        (M, w) => {
          M && y(M), w && (w.removeFromParent(), C(w));
        },
        {
          immediate: !0
        }
      ), g.value || (i(
        "No camera found. Creating a default perspective camera. To have full control over a camera, please add one to the scene."
      ), T());
    }), Q(() => {
      f(p.value);
    }), (m, y) => (At(), kt("canvas", {
      ref_key: "canvas",
      ref: l,
      "data-scene": c.value.uuid,
      class: xt(m.$attrs.class),
      "data-tres": `tresjs ${K(An).version}`,
      style: Lt({
        display: "block",
        width: "100%",
        height: "100%",
        position: m.windowSize ? "fixed" : "relative",
        top: 0,
        left: 0,
        pointerEvents: "auto",
        touchAction: "none",
        ...m.$attrs.style
      })
    }, null, 14, kr));
  }
}), Lr = [
  "TresCanvas",
  "TresLeches",
  "TresScene"
], Rr = {
  template: {
    compilerOptions: {
      isCustomElement: (e) => e.startsWith("Tres") && !Lr.includes(e) || e === "primitive"
    }
  }
}, qr = Rr, Jr = {
  mounted: (e, t) => {
    if (t.arg) {
      console.log(`v-log:${t.arg}`, e[t.arg]);
      return;
    }
    console.log("v-log", e);
  }
};
class wt extends zt {
  constructor(t, n) {
    const r = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0], s = new $e();
    s.setAttribute("position", new Ue(r, 3)), s.computeBoundingSphere();
    const a = new Gt({ fog: !1 });
    super(s, a), this.light = t, this.color = n, this.type = "RectAreaLightHelper";
    const i = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0], l = new $e();
    l.setAttribute("position", new Ue(i, 3)), l.computeBoundingSphere(), this.add(new Vt(l, new ot({ side: Yt, fog: !1 })));
  }
  updateMatrixWorld() {
    if (this.scale.set(0.5 * this.light.width, 0.5 * this.light.height, 1), this.color !== void 0)
      this.material.color.set(this.color), this.children[0].material.color.set(this.color);
    else {
      this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
      const t = this.material.color, n = Math.max(t.r, t.g, t.b);
      n > 1 && t.multiplyScalar(1 / n), this.children[0].material.color.copy(this.material.color);
    }
    this.matrixWorld.extractRotation(this.light.matrixWorld).scale(this.scale).copyPosition(this.light.matrixWorld), this.children[0].matrixWorld.copy(this.matrixWorld);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose(), this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
}
const { logWarning: Ze } = z();
let ae, F;
const Or = {
  DirectionalLight: qt,
  PointLight: Jt,
  SpotLight: Kt,
  HemisphereLight: Qt,
  RectAreaLight: wt
}, Kr = {
  mounted: (e) => {
    if (!e.isLight) {
      Ze(`${e.type} is not a light`);
      return;
    }
    ae = Or[e.type], e.parent.add(new ae(e, 1, e.color.getHex()));
  },
  updated: (e) => {
    F = e.parent.children.find((t) => t instanceof ae), !(F instanceof wt) && F.update();
  },
  unmounted: (e) => {
    if (!e.isLight) {
      Ze(`${e.type} is not a light`);
      return;
    }
    F = e.parent.children.find((t) => t instanceof ae), F && F.dispose && F.dispose(), e.parent.remove(F);
  }
}, { logWarning: Dr } = z();
let B = null;
const Qr = {
  updated: (e, t) => {
    var s;
    const n = Qn(t);
    if (!n) {
      Dr(`v-distance-to: problem with binding value: ${t.value}`);
      return;
    }
    B && (B.dispose(), e.parent.remove(B));
    const r = n.clone().sub(e.position);
    r.normalize(), B = new Xt(r, e.position, e.position.distanceTo(n), 16776960), e.parent.add(B), console.table(
      [
        ["Distance:", e.position.distanceTo(n)],
        [`origin: ${e.name || e.type}`, `x:${e.position.x}, y:${e.position.y}, z:${(s = e.position) == null ? void 0 : s.z}`],
        [`Destiny: ${e.name || e.type}`, `x:${n.x}, y:${n.y}, z:${n == null ? void 0 : n.z}`]
      ]
    );
  },
  unmounted: (e) => {
    B == null || B.dispose(), e.parent.remove(B);
  }
}, Xr = {
  install(e) {
    e.component("TresCanvas", xr);
  }
};
export {
  xr as TresCanvas,
  Me as catalogue,
  dr as createRenderLoop,
  Xr as default,
  dt as dispose,
  Ce as extend,
  Ur as isProd,
  $n as normalizeColor,
  Fr as normalizeVectorFlexibleParam,
  Gr as onTresReady,
  qr as templateCompilerOptions,
  ar as trasverseObjects,
  jn as useCamera,
  Wr as useLoader,
  z as useLogger,
  Yr as useLoop,
  lr as useRaycaster,
  $r as useRenderLoop,
  sr as useRenderer,
  zr as useSeek,
  Nr as useTexture,
  Vr as useTres,
  pe as useTresContext,
  mr as useTresContextProvider,
  ur as useTresEventManager,
  Qr as vDistanceTo,
  Kr as vLightHelper,
  Jr as vLog
};
