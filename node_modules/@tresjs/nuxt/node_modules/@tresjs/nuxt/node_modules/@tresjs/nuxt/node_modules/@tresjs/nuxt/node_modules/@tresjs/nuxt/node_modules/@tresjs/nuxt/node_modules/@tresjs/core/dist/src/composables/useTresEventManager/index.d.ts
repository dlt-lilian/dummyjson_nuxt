import { Scene } from 'three';
import { EmitEventFn } from 'src/types';
import { TresContext } from '../useTresContextProvider';

export interface TresEventManager {
    /**
     * Forces the event system to refire events with the previous mouse event
     */
    forceUpdate: () => void;
    /**
     * pointer-missed events by definition are fired when the pointer missed every object in the scene
     * So we need to track them separately
     * Note: These are used in nodeOps
     */
    registerPointerMissedObject: (object: unknown) => void;
    deregisterPointerMissedObject: (object: unknown) => void;
}
export declare function useTresEventManager(scene: Scene, context: TresContext, emit: EmitEventFn): {
    forceUpdate: () => void;
    registerPointerMissedObject: (maybeTresObject: unknown) => void;
    deregisterPointerMissedObject: (maybeTresObject: unknown) => void;
};
